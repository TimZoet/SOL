#pragma once

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-mesh/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-scenegraph/node.h"

namespace sol
{
    class MeshNode : public Node
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        MeshNode();

        explicit MeshNode(uuids::uuid id);

        explicit MeshNode(Mesh& m);

        MeshNode(uuids::uuid id, Mesh& m);

        MeshNode(const MeshNode&) = delete;

        MeshNode(MeshNode&&) = delete;

        ~MeshNode() noexcept override;

        MeshNode& operator=(const MeshNode&) = delete;

        MeshNode& operator=(MeshNode&&) = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] Mesh* getMesh() const noexcept;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        void setMesh(Mesh* m) noexcept;

    protected:
        ////////////////////////////////////////////////////////////////
        // Casting.
        ////////////////////////////////////////////////////////////////

        bool supportsTypeImpl(Type type) const noexcept override;

        const void* getAsImpl(Type type) const override;

        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        Mesh* mesh = nullptr;
    };
}  // namespace sol
