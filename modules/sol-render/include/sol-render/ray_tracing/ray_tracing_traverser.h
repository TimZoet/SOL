#pragma once

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-scenegraph/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-render/common/i_traverser.h"
#include "sol-render/ray_tracing/fwd.h"

namespace sol
{
    class RayTracingTraverser : public ITraverser
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        RayTracingTraverser();

        RayTracingTraverser(const RayTracingTraverser&) = delete;

        RayTracingTraverser(RayTracingTraverser&&) = delete;

        ~RayTracingTraverser() noexcept override;

        RayTracingTraverser& operator=(const RayTracingTraverser&) = delete;

        RayTracingTraverser& operator=(RayTracingTraverser&&) noexcept = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] bool supportsNodeType(Node::Type type) const noexcept override;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Traversal.
        ////////////////////////////////////////////////////////////////

        void traverse(const Scenegraph& scenegraph, RayTracingRenderData& renderData);

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////
    };
}  // namespace sol
