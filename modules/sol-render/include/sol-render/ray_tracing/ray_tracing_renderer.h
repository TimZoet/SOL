#pragma once

////////////////////////////////////////////////////////////////
// External includes.
////////////////////////////////////////////////////////////////

#include <vulkan/vulkan.hpp>

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-core/fwd.h"
#include "sol-material/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-render/fwd.h"
#include "sol-render/ray_tracing/fwd.h"

namespace sol
{
    class RayTracingRenderer
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Types.
        ////////////////////////////////////////////////////////////////

        struct Parameters
        {
            const RayTracingRenderData& renderData;
            VkCommandBuffer             commandBuffer;
            const uint32_t              index;
        };

        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        RayTracingRenderer();

        RayTracingRenderer(const RayTracingRenderer&) = delete;

        RayTracingRenderer(RayTracingRenderer&&) = delete;

        ~RayTracingRenderer() noexcept;

        RayTracingRenderer& operator=(const RayTracingRenderer&) = delete;

        RayTracingRenderer& operator=(RayTracingRenderer&&) = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Render.
        ////////////////////////////////////////////////////////////////

        void createPipelines(const Parameters& params) const;

        void render(const Parameters& params);

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////
    };
}  // namespace sol
