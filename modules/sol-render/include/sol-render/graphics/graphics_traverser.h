#pragma once

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-scenegraph/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-render/common/i_traverser.h"
#include "sol-render/graphics/fwd.h"

namespace sol
{
    class ForwardTraverser : public ITraverser
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        ForwardTraverser();

        ForwardTraverser(const ForwardTraverser&) = delete;

        ForwardTraverser(ForwardTraverser&&) = delete;

        ~ForwardTraverser() noexcept override;

        ForwardTraverser& operator=(const ForwardTraverser&) = delete;

        ForwardTraverser& operator=(ForwardTraverser&&) noexcept = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] bool supportsNodeType(Node::Type type) const noexcept override;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Traversal.
        ////////////////////////////////////////////////////////////////

        void traverse(const Scenegraph& scenegraph, ForwardRenderData& renderData);

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////
    };
}  // namespace sol
