#pragma once

////////////////////////////////////////////////////////////////
// External includes.
////////////////////////////////////////////////////////////////

#include <vulkan/vulkan.hpp>

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-core/fwd.h"
#include "sol-material/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-render/fwd.h"
#include "sol-render/compute/fwd.h"

namespace sol
{
    class ComputeRenderer
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Types.
        ////////////////////////////////////////////////////////////////

        struct Parameters
        {
            const ComputeRenderData& renderData;
            VkCommandBuffer          commandBuffer;
            const uint32_t           index;
        };

        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        ComputeRenderer();

        ComputeRenderer(const ComputeRenderer&) = delete;

        ComputeRenderer(ComputeRenderer&&) = delete;

        ~ComputeRenderer() noexcept;

        ComputeRenderer& operator=(const ComputeRenderer&) = delete;

        ComputeRenderer& operator=(ComputeRenderer&&) = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////
        // Render.
        ////////////////////////////////////////////////////////////////

        void createPipelines(const Parameters& params) const;

        void render(const Parameters& params);

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////
    };
}  // namespace sol
