#include "sol-command/texture/update_texture_manager_command.h"

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-error/sol_error.h"
#include "sol-texture/texture_manager.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-command/command_queue.h"

namespace sol
{
    ////////////////////////////////////////////////////////////////
    // Constructors.
    ////////////////////////////////////////////////////////////////

    UpdateTextureManagerCommand::UpdateTextureManagerCommand() = default;

    UpdateTextureManagerCommand::~UpdateTextureManagerCommand() noexcept = default;

    ////////////////////////////////////////////////////////////////
    // Getters.
    ////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////
    // Setters.
    ////////////////////////////////////////////////////////////////

    void UpdateTextureManagerCommand::setTextureManager(TextureManager& manager)
    {
        commandQueue->requireNonFinalized();
        textureManager = &manager;
    }

    ////////////////////////////////////////////////////////////////
    // Run.
    ////////////////////////////////////////////////////////////////

    void UpdateTextureManagerCommand::finalize()
    {
        if (!textureManager) throw SolError("Cannot finalize UpdateTextureManagerCommand: textureManager not set.");
    }

    void UpdateTextureManagerCommand::operator()() { textureManager->transfer(); }

    ////////////////////////////////////////////////////////////////
    // Debugging and visualization.
    ////////////////////////////////////////////////////////////////

    std::string UpdateTextureManagerCommand::getVizLabel() const { return "UpdateTextureManager"; }
}  // namespace sol
