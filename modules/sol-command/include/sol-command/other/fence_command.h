#pragma once

////////////////////////////////////////////////////////////////
// Standard includes.
////////////////////////////////////////////////////////////////

#include <vector>

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol-core/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-command/i_command.h"

namespace sol
{
    class FenceCommand final : public ICommand
    {
    public:
        enum class Action
        {
            Wait  = 1,
            Reset = 2
        };

        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        FenceCommand();

        FenceCommand(const FenceCommand&) = delete;

        FenceCommand(FenceCommand&&) = delete;

        ~FenceCommand() noexcept override;

        FenceCommand& operator=(const FenceCommand&) = delete;

        FenceCommand& operator=(FenceCommand&&) = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] Action getAction() const noexcept;

        [[nodiscard]] const std::vector<VulkanFence*>& getFences() const noexcept;

        [[nodiscard]] const uint32_t* getFenceIndexPtr() const noexcept;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        void setAction(Action a);

        void addFence(VulkanFence& fence);

        void setFenceIndexPtr(uint32_t* ptr);

        ////////////////////////////////////////////////////////////////
        // Run.
        ////////////////////////////////////////////////////////////////

        void finalize() override;

        void operator()() override;

        ////////////////////////////////////////////////////////////////
        // Debugging and visualization.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] std::string getVizLabel() const override;

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        Action action = Action::Wait;

        std::vector<VulkanFence*> fences;

        uint32_t* fenceIndexPtr = nullptr;
    };
}  // namespace sol