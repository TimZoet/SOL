#pragma once

////////////////////////////////////////////////////////////////
// Standard includes.
////////////////////////////////////////////////////////////////

#include <functional>

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "sol-task/i_task.h"

namespace sol
{
    class CustomTask final : public ITask
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        CustomTask();

        CustomTask(std::string taskName, std::function<void()> f);

        CustomTask(const CustomTask&) = delete;

        CustomTask(CustomTask&&) noexcept;

        ~CustomTask() noexcept override;

        CustomTask& operator=(const CustomTask&) = delete;

        CustomTask& operator=(CustomTask&&) noexcept;

        ////////////////////////////////////////////////////////////////
        // Run.
        ////////////////////////////////////////////////////////////////

        void finalize() override;

        void operator()() override;

        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        std::function<void()> function;
    };
}  // namespace sol
